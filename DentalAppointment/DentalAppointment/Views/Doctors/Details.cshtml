@using System.Text.Json
@model DentalAppointment.ViewModels.DetailsViewModel

@{
    ViewBag.Title = "Details";
    Layout = "_Layout";
}

@{
    // Предположим, у вас есть модель с полем Name
    var serializedModel = JsonSerializer.Serialize(Model.Doctor.Name);
    var DoctorsFullName = $"{Model.Doctor.Surname} {Model.Doctor.Name} {Model.Doctor.MiddleName}";
}

@{
    // Get the current date
    var today = DateTime.Today;
    // Get the first day of the current week
    var firstDayOfWeek = today.AddDays(-(int)today.DayOfWeek);
    // Get the first day of the next week
    var nextWeek = firstDayOfWeek.AddDays(7);
}

<style>
    table {
      font-family: arial, sans-serif;
      border-collapse: collapse;
      width: 100%;
    }
    
    td, th {
      border: 1px solid #dddddd;
      text-align: left;
      padding: 8px;
    }
    
    tr:nth-child(even) {
      background-color: #dddddd;
    }
    
    /* Стили для элемента карточки */
    .confirm-card {
      display: none; /* Скрыть элемент по умолчанию */
      position: fixed; /* Зафиксировать позицию элемента */
      z-index: 1; /* Поместить элемент поверх других */
      left: 50%; /* Установить левый край элемента по центру экрана */
      top: 50%; /* Установить верхний край элемента по центру экрана */
      transform: translate(-50%, -50%); /* Сместить элемент на половину его ширины и высоты влево и вверх, чтобы центрировать его */
      width: 300px; /* Установить ширину элемента */
      height: 200px; /* Установить высоту элемента */
      background-color: white; /* Установить цвет фона элемента */
      border: 1px solid black; /* Установить цвет и толщину границы элемента */
      box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); /* Установить тень для элемента */
    }
    
    /* Стили для элемента с текстом сообщения */
    .confirm-message {
      padding: 20px; /* Установить отступы для элемента */
      font-size: 18px; /* Установить размер шрифта для элемента */
    }
    
    /* Стили для элемента с кнопками */
    .confirm-buttons {
      display: flex; /* Установить тип отображения элемента как flex, чтобы выравнивать его дочерние элементы */
      justify-content: space-around; /* Распределить дочерние элементы равномерно по горизонтали */
      align-items: center; /* Выровнять дочерние элементы по вертикали */
    }
    
    /* Стили для кнопки подтверждения */
    .confirm-yes {
      width: 100px; /* Установить ширину кнопки */
      height: 40px; /* Установить высоту кнопки */
      background-color: green; /* Установить цвет фона кнопки */
      color: white; /* Установить цвет текста кнопки */
    }
    
    /* Стили для кнопки отклонения */
    .confirm-no {
      width: 100px; /* Установить ширину кнопки */
      height: 40px; /* Установить высоту кнопки */
      background-color: red; /* Установить цвет фона кнопки */
      color: white; /* Установить цвет текста кнопки */
    }

</style>

<section style="background-color: #eee;">
    <div class="row">
      <div class="col-lg-4">
        <div class="card mb-4">
          <div class="card-body text-center">
            <img src="@Model.Doctor.ImageLink" alt="avatar"
                 class="rounded-circle img-fluid" style="width: 150px;">
            <h5 class="my-3">@DoctorsFullName</h5>
            <p class="text-muted mb-1">@Model.Doctor.Specialization</p>
            <p class="text-muted mb-4">@Model.Doctor.Age</p>
          </div>
        </div>
      </div>
      <div class="col-lg-8">
        <div class="card mb-4">
          <div class="card-body">
            <div class="row">
              <div class="col-sm-3">
                <p class="mb-0">Full Name</p>
              </div>
              <div class="col-sm-9">
                <p class="text-muted mb-0">@DoctorsFullName</p>
              </div>
            </div>
            <hr>
            <div class="row">
              <div class="col-sm-3">
                <p class="mb-0">Email</p>
              </div>
              <div class="col-sm-9">
                <p class="text-muted mb-0">@Model.Doctor.Email</p>
              </div>
            </div>
            <hr>
            <div class="row">
              <div class="col-sm-3">
                <p class="mb-0">Phone</p>
              </div>
              <div class="col-sm-9">
                <p class="text-muted mb-0">@Model.Doctor.PhoneNumber</p>
              </div>
            </div>
            <hr>
            <hr>
            <div class="row">
              <div class="col-sm-3">
                <p class="mb-0">Bio:</p>
                <p class="text-muted mb-0">@Model.Doctor.Info</p>
              </div>
            </div>
        </div>
        </div>
    </div>
  </div>
</section>

<table>
  <tr>
      @for (int i = 0; i < 7; i++) {
        var date = firstDayOfWeek.AddDays(i);
        var formattedDate = date.ToString("dddd dd.MM");
        <th style="text-align: center;">@formattedDate</th>
      }
  </tr>
  <tr>
   @for (var i = 0; i < 7; i++) {
   var date = firstDayOfWeek.AddDays(i); // получаем дату для текущей ячейки
   var dateString = date.ToString("yyyy-MM-dd"); // преобразуем дату в строку с нужным форматом
   <td style="text-align: center;">
   @for (int j = 0, h = 10; j < 5; j++, h++)
   {
   var dataTime = DateTime.Now.Date + new TimeSpan(h, 0, 0);
   
        // Проверяем, существует ли уже appointment с такой датой и временем
        var appointmentExists = Model.Appointments.Where(
            a => a.AppointmentDate == date && a.AppointmentTime == dataTime.TimeOfDay
        ).Any();
   
        // Если appointment существует, то отключаем кнопку
        var disabled = appointmentExists ? "disabled" : "";
   
        <button type="submit" class="nav-link-but" data-date="@dateString" data-time="@dataTime" onclick="return confirmBooking(this)" @disabled>
          @h:00
        </button><br/>
      }
    </td>
   }
  </tr>
  <tr>
    @for (var i = 0; i < 7; i++) {
      var date = nextWeek.AddDays(i);
      var formattedDate = date.ToString("dddd dd.MM");
      <th style="text-align: center;">@formattedDate</th>
    }
  </tr> 
  <tr>
    @for (var i = 0; i < 7; i++) {
      var date = nextWeek.AddDays(i); // получаем дату для текущей ячейки
      var dateString = date.ToString("yyyy-MM-dd"); // преобразуем дату в строку с нужным форматом
      <td style="text-align: center;">
       @for (int j = 0, h = 10; j < 5; j++, h++)
       {
         var dataTime = DateTime.Now.Date + new TimeSpan(h, 0, 0);
         
         <button type="submit" class="nav-link-but" data-date="@dateString" data-time="@dataTime" onclick="return confirmBooking(this)">
           @h:00
         </button><br/>
       }
      </td>
    }
  </tr>
</table>

<div id="confirm-card" class="confirm-card">
  <div id="confirm-message" class="confirm-message"></div>
  <div class="confirm-buttons">
    <button id="confirm-yes" class="confirm-yes">Подтвердить</button>
    <button id="confirm-no" class="confirm-no">Отклонить</button>
  </div>
</div>

<script>
  function confirmBooking(button) {
    let time = button.getAttribute("data-time");
    let date = button.getAttribute("data-date");
    let doctorId = @Model.Doctor.Id;
    let serializedModel = @Html.Raw(serializedModel);
    let message = "Вы хотите записаться на прием к доктору с айди " + serializedModel + " на время " + time + "?";
    let card = document.getElementById("confirm-card");
    let messageElement = document.getElementById("confirm-message");
    let yesButton = document.getElementById("confirm-yes");
    let noButton = document.getElementById("confirm-no");
    messageElement.textContent = message;
    card.style.display = "block";

    yesButton.onclick = function() {

      card.style.display = "none";

      let form = document.createElement("form");
      form.method = "post";
      form.action = "/Appointment/Create";
      let inputDate = document.createElement("input");
      inputDate.type = "hidden";
      inputDate.name = "AppointmentDate";
      inputDate.value = button.getAttribute("data-date"); 
      form.appendChild(inputDate);
      let inputTime = document.createElement("input");
      inputTime.type = "hidden";
      inputTime.name = "AppointmentTime";
      inputTime.value = time;
      form.appendChild(inputTime);
      let inputDoctorId = document.createElement("input");
      inputDoctorId.type = "hidden";
      inputDoctorId.name = "DoctorId";
      inputDoctorId.value = doctorId;
      form.appendChild(inputDoctorId);
      document.body.appendChild(form);
      form.submit();
    }
    noButton.onclick = function() {
      card.style.display = "none";
      return false;
    }
  }
</script>
